import logging
import re
import asyncio
import json
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext
from user_states import set_user_state, get_user_state
from utils.date_parser import parse_event_input, calculate_delay
from utils.chat_manager import ChatManager

EVENTS_FILE_PATH = 'events.json'
if not os.path.exists(EVENTS_FILE_PATH):
    with open(EVENTS_FILE_PATH, 'w') as f:
        json.dump({}, f)

class CustomMessageHandler:
    def __init__(self, mediator, chat_manager, chat_ids):
        self.chat_manager = chat_manager
        self.chat_ids = chat_ids
        self.mediator = mediator
        self.mediator.register_message_handler(self)
        self.scheduler = mediator.scheduler
        
    def process_message(self, message):
        # –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        logging.info(f"Processing message: {message}")
        # –ò–Ω–∏—Ü–∏–∏—Ä—É–π—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        self.mediator.notify_inventory_update()    
    
    async def select_chat(self, update: Update, context: CallbackContext) -> None:
        user_id = update.callback_query.from_user.id
        selected_chat_name = update.callback_query.data.split('_')[1]  # –ò–º—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞

        if 'selected_chat_ids' not in context.user_data:
            context.user_data['selected_chat_ids'] = []

        if selected_chat_name in self.chat_ids:
            selected_chat_id = self.chat_ids[selected_chat_name]
            if selected_chat_id not in context.user_data['selected_chat_ids']:
                context.user_data['selected_chat_ids'].append(selected_chat_id)
                logging.info(f"–ß–∞—Ç '{selected_chat_name}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ.")
            else:
                context.user_data['selected_chat_ids'].remove(selected_chat_id)
                logging.info(f"–ß–∞—Ç '{selected_chat_name}' —É–¥–∞–ª–µ–Ω –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö.")

        logging.info(f"–¢–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —á–∞—Ç—ã: {context.user_data['selected_chat_ids']}")
        await update.callback_query.answer()

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = await self.get_chat_selection_keyboard(context.user_data['selected_chat_ids'], self.chat_ids)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ —á—Ç–æ-–ª–∏–±–æ
        current_markup = update.callback_query.message.reply_markup
        if keyboard != current_markup:
            await update.callback_query.message.edit_reply_markup(reply_markup=keyboard)
        else:
            logging.debug("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
        
    async def _reset_chat_selection(self, context: CallbackContext) -> None:
        """–°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–±–æ—Ä–∞ —á–∞—Ç–æ–≤."""
        context.user_data['selected_chat_ids'] = []

    async def get_chat_selection_keyboard(self, selected_chats, chat_ids) -> InlineKeyboardMarkup:
        keyboard = []

        if not chat_ids:
            logging.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            return InlineKeyboardMarkup([])

        for chat_name, chat_id in chat_ids.items():
            if chat_id in selected_chats:
                button_label = f"‚úÖ {chat_name}"  # –ß–∞—Ç –≤—ã–±—Ä–∞–Ω
            else:
                button_label = f"üî≤ {chat_name}"  # –ß–∞—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω
            
            keyboard.append([InlineKeyboardButton(button_label, callback_data=f"select_{chat_name}")])

        keyboard.append([InlineKeyboardButton("üåü –í—ã–±—Ä–∞—Ç—å –≤—Å–µ —Ñ–∏–ª–∏–∞–ª—ã", callback_data='select_all_groups')])        
        keyboard.append([InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä", callback_data='confirm_event')])
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')])

        return InlineKeyboardMarkup(keyboard)

    async def process_start(self, update: Update, context: CallbackContext) -> None:
        query = update.callback_query
        user_id = query.from_user.id
        await query.answer()
        
        logging.debug(f"–í—ã–∑–≤–∞–Ω process_start –¥–ª—è user_id: {user_id}")

        
        webapp_url = 'https://124c-176-215-122-184.ngrok-free.app'
        
        try:
            keyboard = [
                [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ", web_app={'url': webapp_url})],
                [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–±—ã—Ç–∏—è", callback_data='show_events')],
                [InlineKeyboardButton("–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è", callback_data='inventory')],
                [InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data='help')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(
                text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                reply_markup=reply_markup
            )
            logging.debug("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ process_start")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ process_start: {e}")

        context.user_data['current_menu'] = 'main_menu'
        set_user_state(user_id, 'main_menu')

    async def add_event(self, update: Update, context: CallbackContext) -> None:
        user_id = update.effective_user.id
        logging.debug(f"–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—ÇÔøΩÔøΩ–ª—è {user_id}")

        current_state = get_user_state(user_id)
        logging.warning(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {current_state}")
        if current_state != 'adding_event':
            await update.message.reply_text("–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ –≤–≤–æ–¥–∞ —Å–æ–±—ã—Ç–∏—è.")
            logging.warning(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –û–∂–∏–¥–∞–ª–æ—Å—å 'adding_event'.")
            return

        event_input = update.message.text.strip()
        logging.warning(f"–ü–æ–ª—É—á–µ–Ω –≤–≤–æ–¥ —Å–æ–±—ã—Ç–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {event_input}")

        selected_chat_ids = context.user_data.get('selected_chat_ids', [])
        selected_chat_names = [self.chat_manager.get_chat_name_by_id(chat_id) for chat_id in selected_chat_ids]
        logging.warning(f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —á–∞—Ç–æ–≤: {selected_chat_ids}")
        logging.warning(f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ —á–∞—Ç—ã: {selected_chat_names}")

        if not selected_chat_ids:
            await update.message.reply_text("–û—à–∏–±–∫–∞! –ù–µ –≤—ã–±—Ä–∞–Ω—ã —á–∞—Ç—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π.")
            return

        try:
            logging.debug("–í—ã–∑–æ–≤ parse_event_input...")
            parsed_data = parse_event_input(event_input)
            logging.debug("–§—É–Ω–∫—Ü–∏—è parse_event_input –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            date_str = parsed_data['date_str']
            time_str = parsed_data['time_str']
            description = parsed_data['description']

            new_event = {
                'index': len(self.chat_manager.load_events(user_id)),
                'date': date_str,
                'description': description,
                'time': time_str,
            }
            self.chat_manager.save_event(user_id, new_event)
            logging.info(f"–°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {new_event}")

            # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
            event_datetime_str = f"{date_str} {time_str}"
            delay = calculate_delay(event_datetime_str)

            for chat_id in selected_chat_ids:
                logging.debug(f"–ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç: {chat_id} —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥.")
                context.job_queue.run_once(
                    self.scheduler.send_scheduled_message,  # –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ—Ç–æ–¥ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ scheduler
                    when=delay,
                    data={'chat_id': chat_id, 'message': f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏–∏: {description} –≤ {time_str}."}
                )

            msg = await update.message.reply_text(
                f"–°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç(—ã): {', '.join(selected_chat_names)} –≤ {event_datetime_str}."
            )

            await asyncio.sleep(2)
            await context.bot.delete_message(chat_id=msg.chat.id, message_id=msg.message_id)
            set_user_state(user_id, 'showing_events')
            await self.show_events_via_message(update, context, action="add")

        except ValueError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
            await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")


        
    async def delete_event(self, update: Update, context: CallbackContext, event_index: int) -> None:
        query = update.callback_query  # –ü–æ–ª—É—á–∞–µ–º callback_query
        user_id = query.from_user.id

        try:
            user_events = self.chat_manager.load_events(user_id)  # –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_events}")

            if event_index < 0 or event_index >= len(user_events):
                await query.answer("‚ö†Ô∏è –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                return

            deleted_event = user_events.pop(event_index)  # –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
            self.chat_manager.save_events_to_file()

            logging.info(f'–°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ: {deleted_event["date"]} - {deleted_event["description"]}')

            await query.edit_message_text(
                text=f"‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ:\n\n"
                    f"–î–∞—Ç–∞: {deleted_event['date']}\n"
                    f"–û–ø–∏—Å–∞–Ω–∏–µ: {deleted_event['description']}\n"
                    f"–í—Ä–µ–º—è: {deleted_event['time']}\n"
            )
            
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ —Å–æ–±—ã—Ç–∏—è
            if user_events:  
                await self.show_events(query, context)
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π, —É–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª –∏–∑ —Å–ª–æ–≤–∞—Ä—è —Å–æ–±—ã—Ç–∏–π
                if user_id in self.chat_manager.events:  # –ü–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–ª—é—á —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    del self.chat_manager.events[user_id]
                await self.process_start(update, context)
        except KeyError as ke:
            logging.error(f'–ö–ª—é—á–µ–≤–∞—è –æ—à–∏–±–∫–∞: {ke}')
            await query.answer("‚ö†Ô∏è –û–¥–Ω–æ –∏–∑ —Å–æ–±—ã—Ç–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")
        except Exception as e:
            logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {e}')
            await query.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è.")
            
    async def show_events(self, query, context: CallbackContext) -> None:
        user_id = query.from_user.id if query else context.user_data.get('user_id')
        events = self.chat_manager.load_events(user_id)  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–±—ã—Ç–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        keyboard = []

        if events:
            for index, event in enumerate(events):
                keyboard.append([
                    InlineKeyboardButton(f"{event['date']} - {event['description']}", callback_data=f'show_event_details_{index}')
                ])
            keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_menu')])
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(
                text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è:",
                reply_markup=reply_markup
            )
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æÔøΩÔøΩ—ã—Ç–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            keyboard.append([InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data='add_event')])
            keyboard.append([InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='process_start')])
            reply_markup = InlineKeyboardMarkup(keyboard)

            message = await query.edit_message_text(
                text="–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.",
                reply_markup=reply_markup
            )
            context.user_data['message_ids'] = [message.message_id]

    async def show_events_via_message(self, update: Update, context: CallbackContext, action: str = "") -> None:
        user_id = update.effective_user.id
        chat_id = update.effective_chat.id
        events = self.chat_manager.load_events(user_id)  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–±—ã—Ç–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if 'message_ids' in context.user_data:
            for message_id in context.user_data['message_ids']:
                try:
                    await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}: {e}")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π keyboard –∫–∞–∫ –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞
        keyboard = []

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–µ–π—Å—Ç–≤–∏—è
        action_message = ""
        if action == "add":
            action_message = "–°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ."
        elif action == "update":
            action_message = "–°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ."

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è —Å–æ–±—ã—Ç–∏–π
        if events:
            for index, event in enumerate(events):
                keyboard.append([
                    InlineKeyboardButton(f"{event['date']} - {event['description']}", callback_data=f'show_event_details_{index}')
                ])
            keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_menu')])
            reply_markup = InlineKeyboardMarkup(keyboard)

            message = await context.bot.send_message(
                chat_id=chat_id,
                text=f"{action_message}\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è:",
                reply_markup=reply_markup
            )
        else:
            keyboard.append([InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data='add_event')])
            keyboard.append([InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='process_start')])
            reply_markup = InlineKeyboardMarkup(keyboard)

            message = await context.bot.send_message(
                chat_id=chat_id,
                text=f"{action_message}\n–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.",
                reply_markup=reply_markup
            )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º id –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±—É–¥—É—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        context.user_data['message_ids'] = [message.message_id]

    async def show_event_details(self, update: Update, context: CallbackContext) -> None:
        query = update.callback_query
        await query.answer()
        user_id = query.from_user.id
        events = self.chat_manager.load_events(user_id)  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–±—ã—Ç–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        event_index = int(query.data.split('_')[-1])

        if 0 <= event_index < len(events):
            event = events[event_index]
            text_message = (f"–î–∞—Ç–∞: {event['date']}\n"
                            f"–û–ø–∏—Å–∞–Ω–∏–µ: {event['description']}\n"
                            f"–í—Ä–µ–º—è: {event['time']}\n")

            keyboard = [
                [InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f'edit_event_{event_index}')],
                [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data=f'delete_event_{event_index}')],
                [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='show_events')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(text=text_message, reply_markup=reply_markup)
        else:
            await query.answer("‚ö†Ô∏è –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    
    async def edit_event(self, update: Update, context: CallbackContext) -> None:
        logging.debug("–í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è.")
        user_id = update.effective_user.id

        current_state = get_user_state(user_id)
        if current_state != 'editing_event':
            await update.message.reply_text("–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
            return

        event_index = context.user_data.get('editing_event_index')
        user_events = self.chat_manager.load_events(user_id)

        if event_index is None or event_index < 0 or event_index >= len(user_events):
            await update.message.reply_text("–û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return

        try:
            logging.debug('–ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è...')
            
            input_text = update.message.text.strip()
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            parsed_data = parse_event_input(input_text)

            date_str = parsed_data['date_str']
            time_str = parsed_data['time_str']
            description = parsed_data['description']  # –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞

            context.user_data['events'] = user_events

            self.chat_manager.save_events_to_file()
            logging.info(f"–°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {user_events[event_index]}")

            msg = await update.message.reply_text(
                f'–°–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {date_str} {time_str} - {description}'
            )
            await asyncio.sleep(3)
            await context.bot.delete_message(chat_id=msg.chat.id, message_id=msg.message_id)
            
            set_user_state(user_id, 'showing_events')
            logging.debug("–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ 'showing_events'.")

            await self.show_events_via_message(update, context, action="update")

        except ValueError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
            await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

    async def handle_event_input(self, update: Update, context: CallbackContext) -> None:
        user_id = update.effective_user.id
        state = get_user_state(user_id)
        if update.effective_chat.type != 'private':
            return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø –∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø
        logging.info(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {state}")

        if state == 'editing_event':
            event_index = context.user_data.get('editing_event_index')
            if event_index is not None:
                await self.edit_event(update, context)
            else:
                logging.error("–ò–Ω–¥–µ–∫—Å —Å–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.")
                await update.message.reply_text("–û—à–∏–±–∫–∞: –ù–µ –≤—ã–±—Ä–∞–Ω –∏–Ω–¥–µ–∫—Å —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        elif state == 'adding_event':
            await self.add_event(update, context)
        else:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –≤–≤–µÔøΩÔøΩ–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏."
            )

