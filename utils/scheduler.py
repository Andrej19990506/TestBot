import logging
import asyncio
from telegram.ext import CallbackContext, JobQueue
from datetime import datetime, time, timedelta
import pytz
import json
import argparse
import os
import sys
import traceback
from telegram import Bot
from config import bot_token
from utils.bot_types import BotInterface

# –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
PROJECT_ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
sys.path.append(PROJECT_ROOT)

# –¢–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏
from utils.access_control import AccessControl  # –ò–∑–º–µ–Ω–∏–º –Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç
from utils.chat_manager import ChatManager
from utils.mediator import Mediator
from components.inventory_manager import InventoryManager

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
EVENTS_FILE = os.path.join(PROJECT_ROOT, 'events.json')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–º –Ω–µ –Ω—É–∂–Ω—ã –≤—Å–µ –∏–º–ø–æ—Ä—Ç—ã, —Å–æ–∑–¥–∞–¥–∏–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é:
if __name__ == "__main__":
    # –û—Ç–∫–ª—é—á–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    AccessControl = None
    ChatManager = None
    Mediator = None
    InventoryManager = None

class Scheduler:
    def __init__(self, bot=None):
        if bot is not None and not isinstance(bot, BotInterface):
            raise TypeError("Bot must implement BotInterface")
            
        self.bot = bot
        self.tasks = {}
        self.timezone = pytz.timezone('Asia/Krasnoyarsk')
        self.is_running = True
        self.tasks_file = 'scheduled_tasks.json'
        self.job_queue = None
        self.current_loop = None  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ loop

    async def save_scheduled_tasks(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –≤ —Ñ–∞–π–ª"""
        try:
            tasks_data = {}
            for notification_time, chat_tasks in self.tasks.items():
                tasks_data[notification_time.isoformat()] = {
                    'chats': list(chat_tasks.keys()),
                    'messages': {
                        chat: task['message']
                        for chat, task in chat_tasks.items()
                    }
                }
            
            with open(self.tasks_file, 'w', encoding='utf-8') as f:
                json.dump(tasks_data, f, ensure_ascii=False, indent=2)
            
            if tasks_data:
                logging.info(f"‚úÖ Saved {len(tasks_data)} scheduled tasks")
            else:
                logging.info("üìÖ No tasks to save")
            
        except Exception as e:
            logging.error(f"‚ùå Error saving scheduled tasks: {str(e)}\n{traceback.format_exc()}")

    async def load_scheduled_tasks(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if not os.path.exists(self.tasks_file):
                return

            with open(self.tasks_file, 'r', encoding='utf-8') as f:
                tasks_data = json.load(f)

            for time_str, task_info in tasks_data.items():
                notification_time = datetime.fromisoformat(time_str)
                if notification_time > datetime.now(self.timezone):  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ –∑–∞–¥–∞—á–∏
                    self.tasks[notification_time] = {}
                    for chat_name in task_info['chats']:
                        if chat_name in task_info['messages']:
                            self.tasks[notification_time][chat_name] = {
                                'message': task_info['messages'][chat_name],
                                'scheduled_at': datetime.now(self.timezone).isoformat()
                            }

            if self.tasks:
                logging.info(f"‚úÖ Loaded {len(self.tasks)} scheduled tasks")
            else:
                logging.info("üìÖ No scheduled tasks to load")
            
        except Exception as e:
            logging.error(f"‚ùå Error loading scheduled tasks: {str(e)}\n{traceback.format_exc()}")

    def get_task_message(self, task):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∑–∞–¥–∞—á–∏"""
        try:
            return task.get('message', '')
        except Exception:
            return ''

    def attach_inventory_manager(self, inventory_manager):
        """–ü—Ä–∏–≤—è–∑–∫–∞ inventory manager –∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫—É"""
        self.inventory_manager = inventory_manager
        logging.info("‚úÖ Inventory manager attached to scheduler")

    def set_job_queue(self, job_queue):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ job_queue –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        try:
            self.job_queue = job_queue
            if self.job_queue:
                self.schedule_daily_check()
                logging.info("‚úÖ Job queue initialized and daily check scheduled")
            else:
                logging.warning("‚ö†Ô∏è Job queue is None, daily checks will not be scheduled")
        except Exception as e:
            logging.error(f"‚ùå Error setting job queue: {str(e)}\n{traceback.format_exc()}")

    def schedule_daily_check(self):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        if self.job_queue:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ 9:00 —É—Ç—Ä–∞
            check_time = time(9, 0, tzinfo=self.timezone)
            self.job_queue.run_daily(
                self._daily_check_callback,
                check_time,
                days=(0, 1, 2, 3, 4, 5, 6)
            )
            logging.info("‚úÖ Daily check scheduled")
        else:
            logging.warning("‚ö†Ô∏è Job queue not set, daily check not scheduled")

    def schedule_daily_update(self):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        if self.job_queue:
            self.job_queue.run_daily(
                callback=self._daily_update_callback,
                time=time(hour=10, minute=0),
                days=(0, 1, 2, 3, 4, 5, 6),
                name='daily_update'
            )
            logging.info("‚úÖ Daily update scheduled")

    def schedule_daily_clear_inventory(self):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è"""
        if self.job_queue:
            self.job_queue.run_daily(
                callback=self._daily_clear_inventory_callback,
                time=time(hour=23, minute=0),
                days=(0, 1, 2, 3, 4, 5, 6),
                name='daily_clear_inventory'
            )
            logging.info("‚úÖ Daily clear inventory scheduled")

    async def _daily_check_callback(self, context):
        """Callback –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è"""
        if self.inventory_manager:
            await self.inventory_manager.daily_check()
            logging.info("‚úÖ Daily inventory check completed")
        else:
            logging.warning("‚ö†Ô∏è Inventory manager not set, daily check skipped")

    async def _daily_update_callback(self, context):
        """Callback –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        if self.inventory_manager:
            await self.inventory_manager.daily_update()
            logging.info("‚úÖ Daily data update completed")

    async def _daily_clear_inventory_callback(self, context):
        """Callback –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if self.inventory_manager:
            await self.inventory_manager.daily_clear()
            logging.info("‚úÖ Daily cleanup completed")

    async def load_events(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open('events.json', 'r', encoding='utf-8') as f:
                self.events = json.load(f)
            logging.info("‚úÖ Events loaded successfully")
        except FileNotFoundError:
            self.events = []
            logging.warning("‚ö†Ô∏è Events file not found, starting with empty list")
        except Exception as e:
            logging.error(f"‚ùå Error loading events: {str(e)}")
            self.events = []

    def show_upcoming_events(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π"""
        now = datetime.now(self.timezone)
        seven_days_later = now + timedelta(days=7)
        
        upcoming_events = []
        for event in self.events:
            try:
                event_date = datetime.strptime(event['date'], '%Y-%m-%d %H:%M')
                event_date = self.timezone.localize(event_date)
                
                if now <= event_date <= seven_days_later:
                    upcoming_events.append({
                        'description': event['description'],
                        'date': event_date.strftime('%d.%m.%Y %H:%M'),
                        'chats': event['chat_ids']
                    })
            except Exception as e:
                logging.error(f"Error processing event: {str(e)}")
                continue

        if upcoming_events:
            logging.info("\nüìÖ Upcoming events for the next 7 days:")
            for event in sorted(upcoming_events, key=lambda x: datetime.strptime(x['date'], '%d.%m.%Y %H:%M')):
                logging.info(f"""
üïí {event['date']}
üìù {event['description']}
üì± Chats: {', '.join(event['chats'])}
------------------------""")
        else:
            logging.info("üìÖ No upcoming events for the next 7 days")

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        logging.info("üöÄ Scheduler started")
        self.current_loop = asyncio.get_running_loop()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π loop
        await self.load_events()
        self.show_upcoming_events()
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        await self.load_scheduled_tasks()
        
        last_tasks_check = None
        
        while self.is_running:
            try:
                now = datetime.now(self.timezone)
                
                # ÔøΩÔøΩ—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
                for notification_time, chat_tasks in list(self.tasks.items()):
                    if last_tasks_check is None or (now - last_tasks_check).seconds >= 60:
                        if chat_tasks:
                            logging.info(f"‚è∞ Active tasks found for {notification_time.strftime('%H:%M')}")
                        last_tasks_check = now
                    
                    if now >= notification_time:
                        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                        await self.execute_tasks(notification_time, chat_tasks)
                        
                        # –£–¥–∞–ª—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
                        del self.tasks[notification_time]
                        logging.info(f"üóëÔ∏è Removed completed tasks for {notification_time}")

                await asyncio.sleep(1)
                
            except Exception as e:
                logging.error(f"‚ùå Error in scheduler loop: {str(e)}\n{traceback.format_exc()}")
                await asyncio.sleep(5)

    async def execute_tasks(self, notification_time, chat_tasks):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
        for chat_name, task in list(chat_tasks.items()):
            try:
                if isinstance(task, dict) and 'message' in task:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–µ–Ω–Ω–æ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ task['message']
                    notification_message = task['message']
                    
                    if not self.bot:
                        logging.error(f"‚ùå No bot available for {chat_name}")
                        continue
                        
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    await self.bot.send_notification(chat_name, notification_message)
                    logging.info(f"‚úÖ Notification sent to {chat_name}")
            except Exception as e:
                logging.error(f"‚ùå Error sending notification to {chat_name}: {str(e)}\n{traceback.format_exc()}")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        if not self.is_running:
            return
            
        self.is_running = False
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            tasks = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            tasks.append(self.save_scheduled_tasks())
            
            # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
            tasks_count = 0
            for notification_time, chat_tasks in list(self.tasks.items()):
                for chat_name, task in list(chat_tasks.items()):
                    try:
                        if isinstance(task, dict):
                            tasks_count += 1
                    except Exception as e:
                        logging.error(f"‚ùå Error cancelling task for {chat_name}: {str(e)}")

            # –û—á–∏—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –∑–∞–¥–∞—á
            self.tasks.clear()
            
            # –î–æ–∂–∏–¥–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
            if tasks:
                await asyncio.gather(*tasks)
                
            if tasks_count > 0:
                logging.info(f"‚úÖ Cancelled {tasks_count} active tasks")
                
        except Exception as e:
            logging.error(f"‚ùå Error stopping scheduler: {str(e)}")
        finally:
            logging.info("üõë Scheduler stopped")

    async def schedule_notification(self, notification_time, chat_names, task_data):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            if notification_time.tzinfo is None:
                notification_time = self.timezone.localize(notification_time)
            
            if notification_time not in self.tasks:
                self.tasks[notification_time] = {}
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
            for chat_name in chat_names:
                self.tasks[notification_time][chat_name] = task_data
            
            await self.save_scheduled_tasks()
            logging.info(f"üìÖ Notification scheduled for {notification_time} for {len(chat_names)} chats")
            
        except Exception as e:
            logging.error(f"‚ùå Error scheduling notification: {str(e)}")

    async def _schedule_notification_task(self, notification_time, chat_name, message):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            if notification_time.tzinfo is None:
                notification_time = self.timezone.localize(notification_time)

            now = datetime.now(self.timezone)
            wait_time = (notification_time - now).total_seconds()
            
            if wait_time > 0:
                logging.info(f"‚è≥ Waiting {wait_time:.0f} seconds to send notification to {chat_name}")
                await asyncio.sleep(wait_time)

            logging.info(f"üîî Sending notification to {chat_name} at {notification_time}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
            success = await self.bot.send_notification(chat_name, message)
            
            if success:
                logging.info(f"‚úÖ Notification sent successfully to {chat_name}")
            else:
                logging.error(f"‚ùå Failed to send notification to {chat_name}")

            # –£–¥–∞–ª—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
            if notification_time in self.tasks and chat_name in self.tasks[notification_time]:
                del self.tasks[notification_time][chat_name]
                if not self.tasks[notification_time]:
                    del self.tasks[notification_time]

        except Exception as e:
            logging.error(f"‚ùå Error in notification task for {chat_name}: {str(e)}\n{traceback.format_exc()}")

    async def _get_chat_id(self, chat_name):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ chat_id –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open('chat_ids.json', 'r', encoding='utf-8') as f:
                chat_ids = json.load(f)
                return chat_ids.get(chat_name)
        except Exception as e:
            logging.error(f"‚ùå Error getting chat_id for {chat_name}: {str(e)}")
            return None

    async def cancel_notification(self, notification_time, chat_name):
        """–û—Ç–º–µ–Ω–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            if notification_time.tzinfo is None:
                notification_time = self.timezone.localize(notification_time)

            # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
            if notification_time <= datetime.now(self.timezone):
                return True

            # –ò—â–µ–º –∏ —É–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É
            for time_key, chat_tasks in list(self.tasks.items()):
                if (time_key.year == notification_time.year and 
                    time_key.month == notification_time.month and
                    time_key.day == notification_time.day and
                    time_key.hour == notification_time.hour and
                    time_key.minute == notification_time.minute):
                    
                    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                    if chat_name in chat_tasks:
                        del chat_tasks[chat_name]
                        
                        # –ï—Å–ª–∏ –¥–ª—è —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –∑–∞–¥–∞—á, —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
                        if not chat_tasks:
                            del self.tasks[time_key]
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
                        await self.save_scheduled_tasks()

            # –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True, —Ç–∞–∫ –∫–∞–∫ –∑–∞–¥–∞—á–∞ –ª–∏–±–æ —É–¥–∞–ª–µ–Ω–∞, –ª–∏–±–æ –µ—ë –Ω–µ –±—ã–ª–æ
            return True

        except Exception as e:
            logging.error(f"‚ùå Error cancelling notification: {str(e)}")
            return False

    async def remove_event_tasks(self, event_id):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á –¥–ª—è —Å–æ–±—ã—Ç–∏—è"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
            with open('events.json', 'r', encoding='utf-8') as f:
                events = json.load(f)
                event = next((e for e in events if e.get('id') == event_id), None)

            if event:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è
                notification_time = datetime.strptime(event['date'], '%Y-%m-%d %H:%M')
                
                # –£–¥–∞–ª—è–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
                for chat_id in event['chat_ids']:
                    await self.cancel_notification(notification_time, chat_id)

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π
                await self.load_events()

            return True

        except Exception as e:
            logging.error(f"‚ùå Error removing event tasks: {str(e)}")
            return False

    def show_active_tasks(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏"""
        if not self.tasks:
            logging.info("üìÖ No active tasks")
            return

        logging.info("\nüìÖ Active tasks:")
        for notification_time, chat_tasks in self.tasks.items():
            logging.info(f"""
‚è∞ Time: {notification_time.strftime('%Y-%m-%d %H:%M')}
üì± Chats: {', '.join(chat_tasks.keys())}
 Status: {'Pending' if any(not task.done() for task in chat_tasks.values()) else 'Completed'}
------------------------""")

    def get_repeat_dates(self, event_data):
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–æ–±—ã—Ç–∏–π"""
        start_date = datetime.strptime(event_data['date'], '%Y-%m-%d %H:%M')
        repeat = event_data.get('repeat', {'type': 'none'})
        repeat_type = repeat['type']
        
        if repeat_type == 'none':
            return [start_date]
        elif repeat_type == 'daily':
            return self.get_daily_dates(start_date)
        elif repeat_type == 'weekly':
            weekdays = repeat['weekdays']
            return self.get_weekly_dates(start_date, weekdays)
        elif repeat_type == 'monthly':
            month_day = repeat['monthDay']
            return self.get_monthly_dates(start_date, month_day)
        
        return [start_date]

    def get_daily_dates(self, start_date):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
        dates = []
        current = start_date
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º timezone-aware –¥–∞—Ç—ã
        end_date = start_date + timedelta(days=7)
        
        while current <= end_date:
            dates.append(current)
            current += timedelta(days=1)
        
        return dates

    def get_weekly_dates(self, start_date, weekdays):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
        dates = []
        current = start_date
        end_date = start_date + timedelta(days=30)  # –ù–∞ –º–µ—Å—è—Ü –≤–ø–µ—Ä–µ–¥
        
        while current <= end_date:
            if current.weekday() in weekdays:
                dates.append(current)
            current += timedelta(days=1)
        
        return dates

    def get_monthly_dates(self, start_date, day):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç –¥–ª—è –µ–∂–µ–º–µ—Å—è—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
        dates = []
        current = start_date
        end_date = start_date + timedelta(days=90)  # –ù–∞ 3 –º–µ—Å—è—Ü–∞ –≤–ø–µ—Ä–µ–¥
        
        while current <= end_date:
            if current.day == day:
                dates.append(current)
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–Ω—é
            current += timedelta(days=1)
        
        return dates

    async def replan_repeating_events(self):
        """–ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–æ–±—ã—Ç–∏–π"""
        try:
            with open('events.json', 'r', encoding='utf-8') as f:
                events = json.load(f)
            
            now = datetime.now(self.timezone)
            status_updated = False
            
            for event in events:
                repeat = event.get('repeat', {'type': 'none'})
                if repeat['type'] != 'none':
                    event_date = datetime.strptime(event['date'], '%Y-%m-%d %H:%M')
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                    is_active = self.is_event_active(event, now)
                    event['scheduling_status'] = {
                        'active': is_active,
                        'last_check': now.isoformat()
                    }
                    status_updated = True
                    
                    if is_active and event_date < now:
                        # –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
                        new_dates = self.get_repeat_dates(event)
                        if new_dates:
                            event['date'] = new_dates[0].strftime('%Y-%m-%d %H:%M')
                            await self.schedule_notifications_for_dates(event, new_dates)
            
            if status_updated:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
                with open('events.json', 'w', encoding='utf-8') as f:
                    json.dump(events, f, ensure_ascii=False, indent=2)
                
        except Exception as e:
            logging.error(f"Error replanning events: {str(e)}")

    async def check_tasks(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
        try:
            now = datetime.now(self.timezone)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
            with open('events.json', 'r', encoding='utf-8') as f:
                events = json.load(f)
            
            status_updated = False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            for notification_time, chat_tasks in list(self.tasks.items()):
                if notification_time <= now:
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á–∏
                    await self.execute_tasks(notification_time, chat_tasks)
                    del self.tasks[notification_time]
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Å–æ–±—ã—Ç–∏–π
                    for event in events:
                        if self.is_event_active(event, now):
                            event['scheduling_status'] = {
                                'active': True,
                                'last_check': now.isoformat()
                            }
                            status_updated = True
                        else:
                            event['scheduling_status'] = {
                                'active': False,
                                'last_check': now.isoformat()
                            }
                            status_updated = True
            
            if status_updated:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
                with open('events.json', 'w', encoding='utf-8') as f:
                    json.dump(events, f, ensure_ascii=False, indent=2)
                
        except Exception as e:
            logging.error(f"Error checking tasks: {str(e)}")

    def is_event_active(self, event, now):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–æ–±—ã—Ç–∏—è"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è –≤ timezone-aware
            event_date = datetime.strptime(event['date'], '%Y-%m-%d %H:%M')
            event_date = self.timezone.localize(event_date)
            
            repeat = event.get('repeat', {'type': 'none'})
            
            if repeat['type'] == 'none':
                # –î–ª—è —Ä–∞–∑–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π
                return event_date > now
            else:
                # –î–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–æ–±—ã—Ç–∏–π –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±—É–¥—É—â–∏—Ö –¥–∞—Ç
                future_dates = []
                if repeat['type'] == 'daily':
                    future_dates = self.get_daily_dates(event_date)
                elif repeat['type'] == 'weekly':
                    future_dates = self.get_weekly_dates(event_date, repeat['weekdays'])
                elif repeat['type'] == 'monthly':
                    future_dates = self.get_monthly_dates(event_date, repeat['monthDay'])
                    
                return any(date > now for date in future_dates)
            
        except Exception as e:
            logging.error(f"Error checking event activity: {str(e)}")
            return False

