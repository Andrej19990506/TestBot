from telegram import Bot
import logging
import requests
from config import bot_token
from datetime import datetime
import traceback
from utils.bot_types import BotInterface
import json

class TelegramBot(BotInterface):
    def __init__(self, token):
        self.token = token
        self.bot = Bot(token=token)

    def send_event(self, event_data):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º"""
        try:
            logging.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {event_data}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
            required_fields = ['chat_id', 'description', 'date']
            for field in required_fields:
                if field not in event_data:
                    logging.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}")
                    return False
            
            chat_id = str(event_data['chat_id'])
            description = event_data['description']
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            try:
                date_obj = datetime.strptime(event_data['date'], '%Y-%m-%d %H:%M')
                formatted_date = date_obj.strftime('%d.%m.%Y %H:%M')
            except ValueError as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã: {e}")
                formatted_date = event_data['date']
            
            logging.info(f"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}")
            message = f"üóì –ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ:\n\nüìù {description}\nüìÖ {formatted_date}"
            
            logging.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {message}")
            
            try:
                self.bot.send_message(
                    chat_id=chat_id,
                    text=message,
                    parse_mode='HTML'
                )
                logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
                return True
            except Exception as telegram_error:
                logging.error(f"–û—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ —á–∞—Ç {chat_id}: {telegram_error}\n{traceback.format_exc()}")
                return False
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–±—ã—Ç–∏—è –≤ Telegram: {e}\n{traceback.format_exc()}")
            return False

    async def send_notification(self, chat_name, message, is_repeat=False):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç"""
        try:
            with open('chat_ids.json', 'r', encoding='utf-8') as f:
                chat_ids = json.load(f)
                
            if chat_name in chat_ids:
                chat_id = chat_ids[chat_name]
                
                # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                if is_repeat:
                    message = "üîÑ " + message
                    
                await self.bot.send_message(
                    chat_id=chat_id,
                    text=message,
                    parse_mode='HTML'
                )
                logging.info(f"‚úÖ Notification sent to {chat_name}")
            else:
                raise Exception(f"Chat {chat_name} not found in chat_ids.json")
                
        except Exception as e:
            logging.error(f"‚ùå Error sending notification to {chat_name}: {str(e)}")
            raise

    async def get_chat_id(self, chat_name):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ chat_id –ø–æ –∏–º–µ–Ω–∏ —á–∞—Ç–∞"""
        try:
            with open('chat_ids.json', 'r', encoding='utf-8') as f:
                chat_ids = json.load(f)
                
            if chat_name in chat_ids:
                return chat_ids[chat_name]
            else:
                raise Exception(f"Chat {chat_name} not found in chat_ids.json")
                
        except Exception as e:
            logging.error(f"‚ùå Error getting chat_id for {chat_name}: {str(e)}")
            raise