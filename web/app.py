import logging
import asyncio
import threading
import atexit
from datetime import datetime, timedelta
import pytz

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

from flask import Blueprint, request, jsonify, send_from_directory, current_app, send_file
from flask_cors import CORS
import os
from web.telegram_bot import TelegramBot
from config import bot_token
from datetime import datetime
import globals
import traceback
from utils.chat_manager import ChatManager
from pathlib import Path
import json
import uuid
from utils.scheduler import Scheduler

# –ò–∑–º–µ–Ω–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ build_path
current_dir = Path(os.path.dirname(os.path.abspath(__file__)))
build_path = current_dir / 'createEvent' / 'create-event' / 'build'

# –î–æ–±–∞–≤–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
logging.info(f"Current directory: {os.getcwd()}")
logging.info(f"Build path: {build_path}")
logging.info(f"Build exists: {os.path.exists(build_path)}")
logging.info(f"Directory contents: {os.listdir(current_dir)}")

# –°–æ–∑–¥–∞–µ–º Blueprint
bp = Blueprint('main', __name__)
bp.build_path = build_path

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º CORS –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
CORS(bp, resources={
    r"/*": {
        "origins": ["http://localhost:3000"],
        "methods": ["GET", "POST", "PUT", "DELETE", "OPTIONS"],
        "allow_headers": ["Content-Type", "Authorization", "Accept"],
        "expose_headers": ["Content-Type"],
        "supports_credentials": True
    }
})

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = TelegramBot(bot_token)

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π scheduler –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ
scheduler = globals.scheduler

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ scheduler –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def run_scheduler():
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    try:
        loop.run_until_complete(globals.scheduler.start())
    except Exception as e:
        logging.error(f"‚ùå Scheduler error: {e}")
        logging.error(traceback.format_exc())
    finally:
        loop.close()

# –ó–∞–ø—É—Å–∫–∞–µ–º scheduler –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
scheduler_thread.start()

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
async def cleanup():
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã"""
    try:
        logging.info("üõë Server shutting down...")
        await globals.scheduler.stop()
    except Exception as e:
        logging.error(f"‚ùå Error during cleanup: {str(e)}")

def sync_cleanup():
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ cleanup"""
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    try:
        loop.run_until_complete(cleanup())
    except Exception as e:
        logging.error(f"‚ùå Error in sync_cleanup: {str(e)}")
    finally:
        loop.close()

atexit.register(sync_cleanup)

@bp.before_request
def before_request():
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã
    logging.info(f"Request: {request.method} {request.path}")
    logging.info(f"Headers: {dict(request.headers)}")

# API –º–∞—Ä—à—Ä—É—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–µ—Ä–≤—ã–º–∏
@bp.route('/api/chats', methods=['GET'])
def get_chats():
    try:
        globals.chat_manager.load_chat_ids()
        chats = globals.chat_manager.chat_ids
        
        if not chats:
            with open('chat_ids.json', 'r', encoding='utf-8') as f:
                chats = json.load(f)
            
        formatted_chats = {name: str(chat_id) for name, chat_id in chats.items()}
        return jsonify(formatted_chats)
        
    except Exception as e:
        logging.error(f"Error getting chats: {e}")
        return jsonify({'error': str(e)}), 500

@bp.route('/api/events', methods=['GET'])
def get_events():
    try:
        logging.info("Getting events from /api/events")
        events = globals.chat_manager.get_events()
        if not isinstance(events, list):
            try:
                with open('events.json', 'r', encoding='utf-8') as f:
                    events = json.load(f)
            except FileNotFoundError:
                events = []
                
        logging.info(f"Returning events: {events}")
        response = jsonify(events)
        response.headers.update({
            'Content-Type': 'application/json',
            'Cache-Control': 'no-cache'
        })
        return response
    except Exception as e:
        logging.error(f"Error getting events: {e}")
        return jsonify({'error': str(e)}), 500

@bp.route('/api/events', methods=['POST'])
def create_event():
    try:
        data = request.json
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        event_date = datetime.strptime(data['date'], '%Y-%m-%d %H:%M')
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–∞
        krasnoyarsk_tz = pytz.timezone('Asia/Krasnoyarsk')
        event_date = krasnoyarsk_tz.localize(event_date)
        
        # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Ç–æ–∂–µ –ø—Ä–∏–≤–æ–¥–∏–º –∫ —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–∞
        now = datetime.now(krasnoyarsk_tz)
        
        # –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å –¥–∞—Ç—ã
        if event_date < now:
            return jsonify({'error': 'Date cannot be in the past'}), 400

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞—Ç—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–æ–±—ã—Ç–∏–π
        event_dates = scheduler.get_repeat_dates(data)
        
        # –î–ª—è –∫–∞–∂–¥–æ–π –¥–∞—Ç—ã —Å–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        for event_date in event_dates:
            notifications = data.get('notifications', [])
            for notification in notifications:
                notification_time = event_date - timedelta(minutes=notification['time'])
                
                task_data = {
                    'message': notification['message'],
                    'scheduled_at': datetime.now(scheduler.timezone).isoformat()
                }
                
                scheduler.schedule_notification(
                    notification_time=notification_time,
                    chat_names=data['chat_ids'],
                    task_data=task_data
                )

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ–±—ã—Ç–∏—è
        try:
            with open('events.json', 'r', encoding='utf-8') as f:
                events = json.load(f)
        except FileNotFoundError:
            events = []

        # –î–æ–±–∞–≤–ª—è–µ–º ID –∏ —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        data['id'] = str(uuid.uuid4())
        data['scheduling_status'] = {
            'active': True,
            'last_check': datetime.now().isoformat()
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –ø–æ–≤—Ç–æ—Ä–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if 'repeat' not in data:
            data['repeat'] = {
                'type': 'none',
                'weekdays': [],
                'monthDay': None
            }
        
        events.append(data)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π
        with open('events.json', 'w', encoding='utf-8') as f:
            json.dump(events, f, ensure_ascii=False, indent=2)

        # –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω event loop –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            notifications = data.get('notifications', [])
            tasks = []
            
            for notification in notifications:
                notification_time = event_date - timedelta(minutes=notification['time'])
                
                # –°–æ–∑–¥–∞–µ–º task_data —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–∑ notification
                task_data = {
                    'message': notification['message'],  # –ë–µ—Ä–µ–º —Ç–µ–∫—Å—Ç –∏–∑ notification
                    'scheduled_at': datetime.now(scheduler.timezone).isoformat()
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ —Å–ø–∏—Å–æ–∫
                tasks.append(
                    scheduler.schedule_notification(
                        notification_time=notification_time,
                        chat_names=data['chat_ids'],
                        task_data=task_data
                    )
                )
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
            loop.run_until_complete(asyncio.gather(*tasks))
            
        finally:
            loop.close()
            
        return jsonify({'status': 'success'}), 201
        
    except Exception as e:
        logging.error(f"Error creating event: {str(e)}")
        return jsonify({'error': str(e)}), 500

@bp.route('/api/health')
def api_health_check():
    return jsonify({
        'status': 'healthy',
        'timestamp': datetime.now().isoformat()
    })

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
@bp.route('/static/<path:filename>')
def serve_static(filename):
    return send_from_directory(os.path.join(build_path, 'static'), filename)

@bp.route('/debug-paths')
def debug_paths():
    """–ú—Ä—à—Ä—É—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—É—Ç–µ–π"""
    try:
        return jsonify({
            'current_dir': current_dir,
            'build_path': build_path,
            'build_exists': os.path.exists(build_path),
            'build_contents': os.listdir(build_path) if os.path.exists(build_path) else [],
            'static_path': os.path.join(build_path, 'static'),
            'static_exists': os.path.exists(os.path.join(build_path, 'static')),
            'static_contents': os.listdir(os.path.join(build_path, 'static')) if os.path.exists(os.path.join(build_path, 'static')) else [],
            'working_directory': os.getcwd(),
            'absolute_build_path': os.path.abspath(build_path)
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@bp.route('/debug-static-contents')
def debug_static_contents():
    try:
        static_dir = Path(build_path) / 'static'
        js_dir = static_dir / 'js'
        css_dir = static_dir / 'css'
        
        # –î–æ–±–∞–≤–∏–º –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ª—è –æ—Ç–ª–∞–¥–∫–∏
        return jsonify({
            'js_files': os.listdir(js_dir) if js_dir.exists() else [],
            'css_files': os.listdir(css_dir) if css_dir.exists() else [],
            'js_dir_exists': js_dir.exists(),
            'css_dir_exists': css_dir.exists(),
            'js_dir_path': str(js_dir),
            'css_dir_path': str(css_dir),
            'static_dir_contents': os.listdir(static_dir) if static_dir.exists() else []
        })
    except Exception as e:
        logging.error(f"Debug static contents error: {str(e)}")
        logging.error(traceback.format_exc())
        return jsonify({
            'error': str(e),
            'traceback': traceback.format_exc()
        }), 500

@bp.route('/test-static')
def test_static():
    try:
        # –ü–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø—É—Ç–∏
        result = {
            'current_dir': str(current_dir),
            'build_path': str(build_path),
            'build_exists': os.path.exists(build_path),
            'static_path': str(Path(build_path) / 'static'),
            'static_exists': os.path.exists(Path(build_path) / 'static'),
        }
        
        # –ü–æ–≤–µ—Ä—è–µ–º js —Ñ–∞–π–ª—ã
        js_dir = Path(build_path) / 'static' / 'js'
        if js_dir.exists():
            result['js_files'] = os.listdir(js_dir)
            result['js_main_exists'] = os.path.exists(js_dir / 'main.5599eb16.js')
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º css —Ñ–∞–π–ª—ã
        css_dir = Path(build_path) / 'static' / 'css'
        if css_dir.exists():
            result['css_files'] = os.listdir(css_dir)
            result['css_main_exists'] = os.path.exists(css_dir / 'main.8d45e0e9.css')
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É build –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if os.path.exists(build_path):
            result['build_contents'] = os.listdir(build_path)
            static_path = Path(build_path) / 'static'
            if static_path.exists():
                result['static_contents'] = os.listdir(static_path)
                
        return jsonify(result)
    except Exception as e:
        logging.error(f"Test static error: {str(e)}")
        logging.error(traceback.format_exc())
        return jsonify({'error': str(e)}), 500

@bp.route('/check-file/<path:filename>')
def check_file(filename):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä—Ç–Ω—ã–π —Ñ–∞–π–ª
        static_dir = os.path.join(str(build_path), 'static')
        file_path = os.path.join(static_dir, filename)
        
        return jsonify({
            'filename': filename,
            'file_path': file_path,
            'exists': os.path.exists(file_path),
            'is_file': os.path.isfile(file_path) if os.path.exists(file_path) else False,
            'size': os.path.getsize(file_path) if os.path.exists(file_path) else 0,
            'directory_contents': os.listdir(os.path.dirname(file_path)) if os.path.exists(os.path.dirname(file_path)) else []
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@bp.route('/debug-file/<path:filename>')
def debug_file(filename):
    try:
        static_dir = os.path.join(build_path, 'static')
        file_path = os.path.join(static_dir, filename)
        
        return jsonify({
            'filename': filename,
            'static_dir': static_dir,
            'file_path': file_path,
            'exists': os.path.exists(file_path),
            'is_file': os.path.isfile(file_path),
            'static_dir_exists': os.path.exists(static_dir),
            'static_contents': os.listdir(static_dir) if os.path.exists(static_dir) else [],
            'parent_dir': os.path.dirname(file_path),
            'parent_contents': os.listdir(os.path.dirname(file_path)) if os.path.exists(os.path.dirname(file_path)) else []
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 500

# –û–±—â–∏–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è React –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º –∏ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å API –∑–∞–ø—Ä–æ—Å—ã
@bp.route('/', defaults={'path': ''})
@bp.route('/<path:path>')
def serve_react(path):
    # –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º API –∑–∞–ø—Ä–æ—Å—ã –∑–¥–µ—Å—å
    if path.startswith('api/'):
        return jsonify({'error': 'API endpoint not found'}), 404
        
    # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    return send_from_directory(build_path, 'index.html')

@bp.route('/api/events/<event_id>', methods=['DELETE'])
def delete_event(event_id):
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ–±—ã—Ç–∏—è
        try:
            with open('events.json', 'r', encoding='utf-8') as f:
                events = json.load(f)
        except FileNotFoundError:
            events = []

        # –ù–∞—Ö–æ–¥–∏–º —Å–æ–±—ã—Ç–∏–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        event = next((e for e in events if e.get('id') == event_id), None)
        if not event:
            return jsonify({'error': 'Event not found'}), 404

        # –°–æ–∑–¥–∞–µ–º event loop –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æÔøΩÔøΩ–µ—Ä–∞—Ü–∏–∏
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ timezone-aware
            notification_time = datetime.strptime(event['date'], '%Y-%m-%d %H:%M')
            krasnoyarsk_tz = pytz.timezone('Asia/Krasnoyarsk')
            notification_time = krasnoyarsk_tz.localize(notification_time)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è (—Å –ø–æ–≤—Ç–æ—Ä–æ–º –∏–ª–∏ –±–µ–∑)
            repeat_type = event.get('repeat', {}).get('type', 'none')
            
            if repeat_type == 'none':
                # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ—Å—Ç–æ –æ—Ç–º–µ–Ω—è–µ–º –æ–¥–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                logging.info(f"Cancelling single notification for event {event_id}")
                for chat_id in event['chat_ids']:
                    loop.run_until_complete(
                        scheduler.cancel_notification(notification_time, chat_id)
                    )
            else:
                # –î–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–æ–±—ã—Ç–∏–π –æ—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –±—É–¥—É—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                logging.info(f"Cancelling repeating notifications for event {event_id} (type: {repeat_type})")
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±—É–¥—É—â–∏–µ –¥–∞—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                future_dates = []
                if repeat_type == 'daily':
                    future_dates = scheduler.get_daily_dates(notification_time)
                elif repeat_type == 'weekly':
                    future_dates = scheduler.get_weekly_dates(notification_time, event['repeat']['weekdays'])
                elif repeat_type == 'monthly':
                    future_dates = scheduler.get_monthly_dates(notification_time, event['repeat']['monthDay'])
                
                # –û—Ç–º–µ–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –¥–∞—Ç
                for date in future_dates:
                    for chat_id in event['chat_ids']:
                        loop.run_until_complete(
                            scheduler.cancel_notification(date, chat_id)
                        )
                logging.info(f"Cancelled {len(future_dates)} future notifications")

        finally:
            loop.close()

        # –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞
        events = [e for e in events if e.get('id') != event_id]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π
        with open('events.json', 'w', encoding='utf-8') as f:
            json.dump(events, f, ensure_ascii=False, indent=2)

        return jsonify({
            'message': 'Event deleted successfully',
            'event_type': repeat_type,
            'notifications_cancelled': len(future_dates) if repeat_type != 'none' else 1
        }), 200

    except Exception as e:
        logging.error(f"Error deleting event: {str(e)}\n{traceback.format_exc()}")
        return jsonify({'error': str(e)}), 500
